@model IEnumerable<JsoftProject.Models.PurchaseMerge>
@using GridMvc.Html;



@{
    ViewBag.Title = "ViewDetails";
}

<h2>ViewDetails</h2>

<link href="~/Content/linkcolor.css" rel="stylesheet" />

<head>
    <style>
        .btn {
            /* background-color: blue !important;*/
            background-color: #337ab7;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            text-decoration: none;
        }

            .btn:hover {
                color: purple;
                font-size: large;
                background-color: cornflowerblue;
            }
    </style>
</head>

<p>
    @Html.ActionLink("Add New Purchase", "Create", null, new { @class = "btn" })

</p>

<form asp-action="ViewDetailsDailyRate">
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" name="startDate" value="@DateTime.Today.ToString("yyyy-MM-dd")" onchange="checkDate();">

    <label for="endDate">&nbsp;&nbsp;&nbsp;End Date:</label>
    <input type="date" id="endDate" name="endDate" value="@DateTime.Today.ToString("yyyy-MM-dd")" onchange="checkDate();">

    <input type="submit" value="Filter">
    <br />
    <br />
</form>


@if (ViewBag.Message != null)
{
    <p>@ViewBag.Message</p>
}
else
{
    <div class="row">
        <div class="col-md-12">
       @Html.Grid(Model).Named("Purchase Details").Columns(c =>
       {
           c.Add(model => model.trnPurchase.VoucherNo).Titled("Voucher No.").Filterable(true).Sortable(true);

           c.Add(model => model.trnPurchase.VoucherDate).Titled("Voucher Date").Filterable(true).Sortable(true).Format("{0:dd-MM-yyyy}");

           c.Add(model => model.trnPurchase.mstAccount.AccountName).Titled("Account Name").Filterable(true).Sortable(true);

           c.Add(model => model.trnPurchaseItem.mstItem.ItemName).Titled("Item Name").Filterable(true).Sortable(true);

           //c.Add(m => m.VoucherDate).Titled("Voucher Date").Filterable(true).Sortable(true);

           c.Add(m => m.trnPurchaseItem.Pcs).Titled("Pieces").Filterable(true).Sortable(true);

           c.Add(m => m.trnPurchaseItem.Mrp).Titled("MRP").Filterable(true).Sortable(true);


           c.Add(model => model.trnPurchaseItem.GrossWt).Titled("Gross Weight").Filterable(true).Sortable(true);

           c.Add(m => m.trnPurchaseItem.NetWt).Titled("Net Weight").Filterable(true).Sortable(true);

           c.Add(m => m.trnPurchaseItem.Rate).Titled("Rate").Filterable(true).Sortable(true);

           c.Add(model => model.trnPurchase.InvoiceType).Titled("Invoice Type").Filterable(true).Sortable(true);


           c.Add(m => m.trnPurchaseItem.mstTax.TaxName).Titled("Tax Name").Filterable(true).Sortable(true);

           c.Add(m => m.trnPurchaseItem.SGSTAmount).Titled("SGST Amount").Filterable(true).Sortable(true);

           c.Add(m => m.trnPurchaseItem.CGSTAmount).Titled("CGST Amount").Filterable(true).Sortable(true);

           c.Add(m => m.trnPurchaseItem.IGSTAmount).Titled("IGST Amount").Filterable(true).Sortable(true);

           c.Add(m => m.trnPurchaseItem.TotalAmt).Titled("Total Amount").Filterable(true).Sortable(true);





           c.Add(model => model.trnPurchase.CashAmount).Titled("Cash Amount").Filterable(true).Sortable(true);

           c.Add(model => model.trnPurchase.ChequeAmount).Titled("Cheque Amount").Filterable(true).Sortable(true);

           c.Add(model => model.trnPurchase.OutstandingAmount).Titled("Outstanding Amount").Filterable(true).Sortable(true);

           c.Add(model => model.trnPurchase.Remarks).Titled("Remarks").Filterable(true).Sortable(true);


           c.Add()
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(30)
            .RenderValueAs(o => Html.ActionLink("Edit", "Edit", new { id = o.trnPurchase.PurchaseID }, new { @class = "btn btn-primary" }));

           c.Add()
           .Encoded(false)
           .Sanitized(false)
           .SetWidth(30)
           .RenderValueAs(o => Html.ActionLink("Delete", "Delete", new { id = o.trnPurchase.PurchaseID }, new { @class = "btn btn-info" }));

       }).WithPaging(10).EmptyText("No records Found")
        </div>
    </div>
}

@section styles{
    @Styles.Render("~/Content/Gridmvc")
}
@section scripts{
    @Scripts.Render("~/bundles/Gridmvc")
    @Scripts.Render("~/bundles/jqueryval")
}


<script>
        function checkDate() {
            let selectedDate = new Date(document.getElementById("RateDate").value);
            let today = new Date();
            if (selectedDate > today) {
                alert("Please select a date that is not in the future");
                document.getElementById("RateDate").value = "";
            }
        }
</script>


<script>
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        today = yyyy + '-' + mm + '-' + dd;

        document.getElementById("RateDate").setAttribute("max", today);
</script>
